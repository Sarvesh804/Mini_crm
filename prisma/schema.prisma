// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}



model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  campaigns     Campaign[]

  @@map("users")
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}




model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  totalSpent  Float    @default(0)
  visits      Int      @default(0)
  lastVisit   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  orders       Order[]
  campaignLogs CommunicationLog[]

  @@map("customers")
}




model Order {
  id         String   @id @default(cuid())
  customerId String
  amount     Float
  createdAt  DateTime @default(now())
  
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("orders")
}




model Campaign {
  id           String   @id @default(cuid())
  name         String
  rules        Json
  message      String
  audienceSize Int      @default(0)
  status       String   @default("DRAFT") // DRAFT, ACTIVE, COMPLETED, PAUSED
  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User     @relation(fields: [createdBy], references: [id])
  logs         CommunicationLog[]

  @@map("campaigns")
}




model CommunicationLog {
  id         String   @id @default(cuid())
  campaignId String
  customerId String
  status     String   @default("PENDING") // PENDING, SENT, FAILED
  message    String
  sentAt     DateTime?
  errorMsg   String?
  createdAt  DateTime @default(now())
  
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])

  @@map("communication_logs")
}